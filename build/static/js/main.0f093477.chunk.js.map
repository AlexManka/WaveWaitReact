{"version":3,"sources":["logo.gif","components/Wait/Wait.js","components/Wave/CurrentEvents.js","components/Wave/Wave.js","components/NewEvent/NewEvent.js","components/Login/Login.js","components/Login/Logout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wait","handleClick","props","toggle","className","onClick","this","src","logo","alt","Component","CurrentEvents","state","error","isLoaded","items","handleErrors","a","response","ok","Error","statusText","data","username","fetch","mode","method","credentials","headers","body","JSON","stringify","then","res","json","result","setState","message","map","item","key","id","name","price","React","Wave","NewEvent","toggleWave","seenwave","toggleWait","seenwait","action","mood","handleChange","bind","handleSubmit","event","preventDefault","alert","target","value","onSubmit","htmlFor","placeholder","onChange","Login","clientId","buttonText","onSuccess","console","log","profileObj","onFailure","cookiePolicy","style","marginTop","isSignedIn","Logout","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,iSC2B5BC,E,4MAlBbC,YAAc,WACb,EAAKC,MAAMC,U,4CAGZ,WACE,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,iBACb,0BAAMA,UAAU,QAAQC,QAASC,KAAKL,aAAtC,QAGA,yBAAKM,IAAKC,IAAMC,IAAI,e,GAZXC,a,gCC8FFC,E,kDAnGb,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IACDU,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,MAAO,IALQ,E,4FAWnB,iBAGaC,EAHb,kBAAAC,EAAA,6DAGaD,EAHb,SAG0BE,GAElB,IAAKA,EAASC,GACV,MAAMC,MAAMF,EAASG,YAEzB,OAAOH,GAGLI,EAAO,CAAEC,SAAU,WAX7B,SAYUC,MAAM,uEAAwE,CAChFC,KAAM,UACNC,OAAQ,OACRC,YAAa,OACbC,QAAS,CACL,eAAgB,oBAGpBC,KAAMC,KAAKC,UAAUT,KAExBU,KAAKhB,GACLgB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACD,EAAKC,SAAS,CACVtB,UAAU,EACVC,MAAOoB,EAAOpB,WAMlB,SAACF,GACD,EAAKuB,SAAS,CACVtB,UAAU,EACVD,aArCZ,2C,0EAoEA,WAAU,IAAD,EAC4BP,KAAKM,MAAhCC,EADD,EACCA,MAAOC,EADR,EACQA,SAAUC,EADlB,EACkBA,MACzB,OAAIF,EACK,uCAAaA,EAAMwB,SAChBvB,EAIR,4BACGC,EAAMuB,KAAI,SAAAC,GAAI,OACb,wBAAIC,IAAKD,EAAKE,IACXF,EAAKG,KADR,IACeH,EAAKI,WANnB,+C,GArFaC,IAAMlC,WC6BnBmC,E,4MApBb5C,YAAc,WACb,EAAKC,MAAMC,U,4CAGZ,WACE,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,iBACb,0BAAMA,UAAU,QAAQC,QAASC,KAAKL,aAAtC,QAGA,6BACE,kBAAC,EAAD,a,GAbOS,aCgFJoC,E,kDAhFb,WAAY5C,GAAO,IAAD,8BAChB,cAAMA,IA8BR6C,WAAa,WACZ,EAAKX,SAAS,CACbY,UAAW,EAAKpC,MAAMoC,YAjCN,EAqClBC,WAAa,WACZ,EAAKb,SAAS,CACbc,UAAW,EAAKtC,MAAMsC,YArCtB,EAAKtC,MAAQ,CAAEuC,OAAO,GAAGC,KAAK,GAAGJ,UAAS,EAAME,UAAS,GACzD,EAAKG,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJJ,E,gDAQlB,SAAaE,GAAO,IAAD,EACQlD,KAAKM,MAAtBuC,EADS,EACTA,OAAQC,EADC,EACDA,KAChBI,EAAMC,iBACNC,MAAM,oDAAD,OAEQP,EAFR,2BAGMC,EAHN,a,0BAYP,SAAaI,GACXlD,KAAK8B,SAAL,eAGGoB,EAAMG,OAAOjB,KAAQc,EAAMG,OAAOC,U,oBAmBvC,WACE,OACE,0BAAMC,SAAUvD,KAAKiD,cACnB,6BACE,2BAAOO,QAAQ,UAAf,WACA,2BACEpB,KAAK,SACLqB,YAAY,SACZH,MAAStD,KAAKM,MAAMuC,OACpBa,SAAU1D,KAAK+C,gBAGnB,6BACE,2BAAOS,QAAQ,QAAf,SACA,2BACEpB,KAAK,OACLqB,YAAY,OACZH,MAAOtD,KAAKM,MAAMwC,KAClBY,SAAU1D,KAAK+C,gBAGnB,yBAAKjD,UAAU,OAAOC,QAASC,KAAKyC,YAClC,yCAEF,yBAAK3C,UAAU,OAAOC,QAASC,KAAK2C,YAClC,yCAED3C,KAAKM,MAAMoC,SAAW,kBAAC,EAAD,CAAM7C,OAAQG,KAAKyC,aAAiB,KAC1DzC,KAAKM,MAAMsC,SAAW,kBAAC,EAAD,CAAM/C,OAAQG,KAAK2C,aAAiB,U,GA3E5CvC,a,OCoBRuD,MAxBf,WASI,OACI,6BACI,kBAAC,cAAD,CACAC,SAdK,2EAeLC,WAAW,QACXC,UAbU,SAACnC,GACfoC,QAAQC,IAAI,+BAAgCrC,EAAIsC,aAa5CC,UAVU,SAACvC,GACfoC,QAAQC,IAAI,8BAA+BrC,IAUvCwC,aAAc,qBACdC,MAAO,CAAEC,UAAW,SACpBC,YAAY,MCFTC,MAhBf,WAKI,OACI,6BACI,kBAAC,eAAD,CACAX,SAVK,2EAWLC,WAAW,SACXC,UATU,SAACnC,GACfyB,MAAM,kCCSCoB,MAVf,WACE,OACE,yBAAK1E,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCc2E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1D,MAAK,SAAA2D,GACjCA,EAAaC,kB","file":"static/js/main.0f093477.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b65a2463.gif\";","import React, { Component } from \"react\";\nimport \"./Wait.css\";\nimport logo from './../../logo.gif';\n\n\n///////CHECK FOR MATCHES\n//////AFTER MATCH, CLOSE\n\nclass Wait extends Component {\n  handleClick = () => {\n   this.props.toggle();\n  };\n\n  render() {\n    return (\n      <div className=\"modal\">\n        <div className=\"modal_content\">\n          <span className=\"close\" onClick={this.handleClick}>\n            &times;\n          </span>\n          <img src={logo} alt=\"logo\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Wait;","import React from 'react';\r\n\r\nclass CurrentEvents extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        error: null,\r\n        isLoaded: false,\r\n        items: []\r\n      };\r\n    }\r\n\r\n    \r\n  \r\n    async componentDidMount() {\r\n\r\n        \r\n        function handleErrors(response) {\r\n            //hitting this error...\r\n            if (!response.ok) {\r\n                throw Error(response.statusText);\r\n            }\r\n            return response;\r\n        }\r\n        \r\n        const data = { username: 'exmaple'};\r\n        await fetch(\"https://us-central1-treehacks-2w.cloudfunctions.net/currentEventList\", {\r\n            mode: \"no-cors\",\r\n            method: 'POST',\r\n            credentials: 'omit',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n                // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        .then(handleErrors)\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {\r\n            this.setState({\r\n                isLoaded: true,\r\n                items: result.items\r\n            });\r\n            },\r\n            // Note: it's important to handle errors here\r\n            // instead of a catch() block so that we don't swallow\r\n            // exceptions from actual bugs in components.\r\n            (error) => {\r\n            this.setState({\r\n                isLoaded: true,\r\n                error\r\n            });\r\n            }\r\n        )\r\n        // .then(response => {\r\n        //     if(!response.ok)\r\n        //     {\r\n        //         throw new Error('something went wrong.');\r\n        //     }\r\n\r\n        //     return res => res.json()\r\n        // })\r\n        // .then(\r\n        //     (result) => {\r\n        //         this.setState({\r\n        //         isLoaded: true,\r\n        //         items: result\r\n        //         });\r\n        // })\r\n        //   // Note: it's important to handle errors here\r\n        //   // instead of a catch() block so that we don't swallow\r\n        //   // exceptions from actual bugs in components.\r\n        //  .catch( \r\n        //     (error) => {\r\n        //         this.setState({\r\n        //         isLoaded: true,\r\n        //         error\r\n        //     });\r\n        // })\r\n    }\r\n  \r\n    render() {\r\n      const { error, isLoaded, items } = this.state;\r\n      if (error) {\r\n        return <div>Error: {error.message}</div>;\r\n      } else if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n      } else {\r\n        return (\r\n          <ul>\r\n            {items.map(item => (\r\n              <li key={item.id}>\r\n                {item.name} {item.price}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  export default CurrentEvents;","import React, { Component } from \"react\";\nimport \"./Wave.css\";\nimport CurrentEvents from './CurrentEvents';\n\n\n///////ASK FOR CURRENT EVENTS HERE!!!!!!!\n\n///////AFTER CHECK FOR MATCHES\n///////AFTER MATCH CLOSE\n\nclass Wave extends Component {\n  handleClick = () => {\n   this.props.toggle();\n  };\n\n  render() {\n    return (\n      <div className=\"modal\">\n        <div className=\"modal_content\">\n          <span className=\"close\" onClick={this.handleClick}>\n            &times;\n          </span>\n          <div>\n            <CurrentEvents />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Wave;","import React,{ Component } from 'react'\nimport './NewEvent.css';\nimport Wait from '.././Wait/Wait';\nimport Wave from '.././Wave/Wave';\n\n\n\n/////CHECK FOR MATCHES AT END, IF MATCH DISPLAY CHAT\n  \nclass NewEvent extends Component{ \n  constructor(props){ \n    super(props) \n    this.state = { action:'',mood:'',seenwave:false,seenwait:false} \n    this.handleChange = this.handleChange.bind(this) \n    this.handleSubmit = this.handleSubmit.bind(this) \n  } \n  \n  // Form submitting logic, prevent default page refresh  \n  handleSubmit(event){ \n    const { action, mood } = this.state \n    event.preventDefault() \n    alert(` \n      ____Your Details____\\n \n      Action : ${action} \n      Mood : ${mood}\n    `) \n  } \n  \n  //// PUSH NEW EVENT HERE!!!!\n  // Method causes to store all the values of the  \n  // input field in react state single method handle  \n  // input changes of all the input field using ES6  \n  // javascript feature computed property names \n  handleChange(event){ \n    this.setState({ \n      // Computed property names \n      // keys of the objects are computed dynamically \n      [event.target.name] : event.target.value \n    }) \n  }\n\n  toggleWave = () => {\n   this.setState({\n    seenwave: !this.state.seenwave\n   });\n  }\n\n  toggleWait = () => {\n   this.setState({\n    seenwait: !this.state.seenwait\n   });\n  }  \n  \n  // Return a controlled form i.e. values of the  \n  // input field not stored in DOM values are exist  \n  // in react component itself as state \n  render(){ \n    return( \n      <form onSubmit={this.handleSubmit}> \n        <div> \n          <label htmlFor='action'>Action </label> \n          <input  \n            name='action'\n            placeholder='Action' \n            value = {this.state.action} \n            onChange={this.handleChange} \n          /> \n        </div> \n        <div> \n          <label htmlFor='mood'>Mood </label> \n          <input \n            name='mood' \n            placeholder='Mood'\n            value={this.state.mood} \n            onChange={this.handleChange} \n          /> \n        </div>\n        <div className=\"btn1\" onClick={this.toggleWave}>\n          <button>Wave</button>\n        </div>\n        <div className=\"btn2\" onClick={this.toggleWait}>\n          <button>Wait</button>\n        </div>\n        {this.state.seenwave ? <Wave toggle={this.toggleWave} /> : null} \n        {this.state.seenwait ? <Wait toggle={this.toggleWait} /> : null}\n      </form>\n    ) \n  } \n} \n  \nexport default NewEvent;","import React from 'react';\nimport { GoogleLogin } from 'react-google-login';\n\nconst clientId = \"538005462495-ga04timqt7fd23438knrfaemlnhnktsn.apps.googleusercontent.com\";\n\nfunction Login() {\n    const onSuccess = (res) => {\n        console.log('[Login Success] currentUser:', res.profileObj);\n    };\n\n    const onFailure = (res) => {\n        console.log('[Login Failed] currentUser:', res);\n    };\n\n    return (\n        <div>\n            <GoogleLogin\n            clientId={clientId}\n            buttonText=\"Login\"\n            onSuccess={onSuccess}\n            onFailure={onFailure}\n            cookiePolicy={'single_host_origin'}\n            style={{ marginTop: '100px' }}\n            isSignedIn={true}\n            />\n        </div>\n    );\n}\n\nexport default Login;","import React from 'react';\r\nimport { GoogleLogout } from 'react-google-login';\r\n\r\nconst clientId = \"538005462495-ga04timqt7fd23438knrfaemlnhnktsn.apps.googleusercontent.com\";\r\n\r\nfunction Logout() {\r\n    const onSuccess = (res) => {\r\n        alert('Lougout made successfully');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <GoogleLogout\r\n            clientId={clientId}\r\n            buttonText=\"Logout\"\r\n            onSuccess={onSuccess}\r\n            ></GoogleLogout>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logout;","import React from 'react';\nimport './App.css';\nimport NewEvent from './components/NewEvent/NewEvent';\nimport Login from './components/Login/Login';\nimport Logout from './components/Login/Logout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Login />\n      <Logout />\n      <NewEvent />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}